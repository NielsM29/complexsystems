setwd("~/Documents/Code/complexsystems/modules/Phase Space Reconstruction")
library(NCmisc)
list.functions.in.file('phase_space_reconstruction.R', alphabetic = TRUE)
set.seed(29)
library(NCmisc)
list.functions.in.file('phase_space_reconstruction.R', alphabetic = TRUE)
list.functions.in.file('phase_space_reconstruction.R', alphabetic = TRUE)
list.functions.in.file('phase_space_reconstruction.R', alphabetic = TRUE)
setwd("~/Documents/Code/complexsystems/modules/(Multi-)Fractal Analysis")
list.functions.in.file('(multi-)fractal_analyses.R', alphabetic = TRUE)
library(NCmisc)
list.functions.in.file('(multi-)fractal_analyses.R', alphabetic = TRUE)
# Loading packages --------------------------------------------------------
#Required packages
library(nonlinearTseries)
library(ifultools)
library(jsonlite)
library(zoo)
library(MFDFA)
library(ggplot2)
library(ggpubr)
# Loading datasets --------------------------------------------------------
#Import wolf_sheep_grasspredation.csv
df_1 <- read.csv("wolf_sheep_grasspredation.csv", header = 1, skip = 23, col.names = c('', 'time', 'sheep', 'wolves', 'grass'))
df_1[,1] <- NULL
ggplot(data = df_1, aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = sheep, color = 'Sheep')) +
geom_line(aes(y = wolves, color = 'Wolves')) +
geom_line(aes(y = grass, color = 'Grass')) +
ggtitle('Sheep/Wolf/Grass Predator-prey Dataset') +
xlab('Time') +
ylab('Count')
#Import Binance_BTCUSDT_1h
df_2 <- read.csv("Binance_BTCUSDT_1h.csv", skip = 2, col.names = c("unix", "time", "symbol","open", "high", "low", "close", "Volume BTC", "Volume USDT", "tradecount"))
df_2 <- df_2[0:3000,]
df_2[,c(1,3:6,8:10)] <- NULL
df_2$time <- seq(1, 3000)
ggplot(data = df_2, aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = close, color = 'Closing price')) +
ggtitle('Bitcoin hourly closing price') +
xlab('Time') +
ylab('Closing price')
# Mean centering ----------------------------------------------------------
#Mean center
df_1$wolves_centered <- scale(df_1$wolves, center = TRUE, scale = FALSE)
df_1$grass_centered <- scale(df_1$grass, center = TRUE, scale = FALSE)
df_1$sheep_centered <- scale(df_1$sheep, center = TRUE, scale = FALSE)
#Interpolate missing values
df_1$wolves_centered <- na.approx(df_1$wolves_centered)
df_1$grass_centered <- na.approx(df_1$grass_centered)
df_1$sheep_centered <- na.approx(df_1$sheep_centered)
#Plot full time-series
A <- ggplot(data = df_1[0:2000,], aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = wolves_centered, color = 'Wolves')) +
ggtitle('Mean-centered "Wolves" variable (full-scale)') +
xlab('Time') +
ylab('Value')
#Plot full time-series on a scale of 200 time-steps
B <- ggplot(data = df_1[300:500,], aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = wolves_centered, color = 'Wolves')) +
ggtitle('Mean-centered "Wolves" variable (200 time-steps scale)') +
xlab('Time') +
ylab('Value')
#Plot full on second scale of 20 time-steps
C <- ggplot(data = df_1[20:40,], aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = wolves_centered, color = 'Wolves')) +
ggtitle('Mean-centered "Wolves" variable (20 time-steps scale)') +
xlab('Time') +
ylab('Value')
#Show self-similarity at different scales
ggarrange(A, B, C,
labels = c("A", "B", "C"),
ncol = 1, nrow = 3)
# DFA analysis ------------------------------------------------------------
#Set parameters for DFA analysis
scale_min = 16
scale_max = length(df_1$wolves_centered) / 10 #Hu et al (2001)
scale_num = length(logScale(scale.min = scale_min, scale.max = scale_max, scale.ratio = 1.25))
#DFA wolves
wolves_dfa = dfa(time.series = df_1$wolves_centered, npoints = scale_num,
window.size.range = c(scale_min,scale_max), do.plot = FALSE)
wolves_estimation = estimate(wolves_dfa, do.plot = TRUE, main = 'DFA - Wolves time-series')
#DFA sheep
sheep_dfa = dfa(time.series = df_1$sheep_centered, npoints = scale_num,
window.size.range = c(scale_min,scale_max), do.plot = FALSE)
sheep_estimation = estimate(sheep_dfa, do.plot = TRUE, main = 'DFA - Sheep time-series')
#DFA Grass
grass_dfa = dfa(time.series = df_1$grass_centered, npoints = scale_num,
window.size.range = c(scale_min,scale_max), do.plot = FALSE)
grass_estimation = estimate(grass_dfa, do.plot = TRUE, main = 'DFA - Grass time-series')
# Surrogate check ---------------------------------------------------------
#Generate a randomized version of 'wolves' time-series
df_1$wolves_surrogate <- sample(df_1$wolves_centered, replace=FALSE)
ggplot(data = df_1, aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = wolves_surrogate, color = 'Wolves')) +
ggtitle('Randomised mean-centered wolves time-series') +
xlab('Time') +
ylab('Value')
#Run DFA on randomised time-series
wolves_surrogate_dfa = dfa(time.series = df_1$wolves_surrogate, npoints = scale_num,
window.size.range = c(scale_min, scale_max), do.plot = FALSE)
wolves_surrogaate_estimation = estimate(wolves_surrogate_dfa, do.plot = TRUE, main = 'DFA - Randomised wolves time-series')
# MF-DFA analysis ---------------------------------------------------------
#Mean Center
df_2$close_centered <- scale(df_2$close, center = TRUE, scale = FALSE)
#Interpolate missing values
df_2$close_centered <- na.approx(df_2$close_centered)
#Plot full time-series
A.2 <- ggplot(data = df_2[0:3000,], aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = close_centered, color = 'Close')) +
ggtitle('Mean-centered "Close" time-series (full-scale)') +
xlab('Time') +
ylab('Value')
#Plot full time-series on a scale of 300 time-steps
B.2 <- ggplot(data = df_2[300:600,], aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = close_centered, color = 'Close')) +
ggtitle('Mean-centered "Close" variable (300 time-steps scale)') +
xlab('Time') +
ylab('Value')
#Plot full on second scale of 30 time-steps
C.2 <- ggplot(data = df_2[370:400,], aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = close_centered, color = 'Close')) +
ggtitle('Mean-centered "Close" variable (30 time-steps scale)') +
xlab('Time') +
ylab('Value')
#Show self-similarity at different scales
ggarrange(A.2, B.2, C.2,
labels = c("A", "B", "C"),
ncol = 1, nrow = 3)
#Setting parameters for MF-DFA
scale_min_2 <- 16
scale_max_2 <- length(df_2$close_centered) / 10
scale_2 <- logScale(scale.min = scale_min_2, scale.max = scale_max_2, scale.ratio = 1.25)
#Range of q order exponents
q <- -10:10
#Run the MF-DFA
mfdfa_btc <- MFDFA(df_2$close_centered, scale = as.integer(scale_2), q = q, m = 1)
#Create a surrogate version and run MFDFA
mfdfa_btc_surrogate <- MFDFA(sample(df_2$close_centered, rep=FALSE), scale = as.integer(scale_2), q = q, m = 1)
#Compare surr data vs bitcoin data
matplot(mfdfa_btc$line, type = 'l', pch = 19, add = FALSE,
ylim = c(8,18),
xlab = "log Time Scale",
ylab="log F(q)",
main = "MF - DFA BTC hourly closing")
matplot(mfdfa_btc_surrogate$line, type = 'l', pch = 19, add = FALSE,
ylim = c(8,18),
xlab="log Time Scale",
ylab="log F(q)",
main = "BTC hourly closing surrogate")
#Calculate the width of the spectrum and compare it the previous estimates
normal_width = max(mfdfa_btc$spec$hq) - min(mfdfa_btc$spec$hq)
surrogate_width = max(mfdfa_btc_surrogate$spec$hq) - min(mfdfa_btc_surrogate$spec$hq)
normal_width
surrogate_width
library(NCmisc)
list.functions.in.file('(multi-)fractal_analyses.R', alphabetic = TRUE)
# Loading packages --------------------------------------------------------
#Required packages
library(ggplot2)
library(nonlinearTseries)
library(tseriesChaos)
library(scatterplot3d)
library(plotly)
# Loading dataset ---------------------------------------------------------
# Import wolf_sheep_grasspredation.csv
df <- read.csv("wolf_sheep_grasspredation.csv", header = 1, skip = 23, col.names = c('', 'time', 'sheep', 'wolves', 'grass'))
df[,1] <- NULL
ggplot(data = df, aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = sheep, color = 'Sheep')) +
geom_line(aes(y = wolves, color = 'Wolves')) +
geom_line(aes(y = grass, color = 'Grass')) +
ggtitle('Sheep/Wolf/Grass Predator-prey Dataset') +
xlab('Time') +
ylab('Count')
# Estimating timelag ------------------------------------------------------
# Compute the ACF for max 100 lags for all three vars.
tau.acf_sheep <- timeLag(df$sheep, technique = "acf", lag.max = 50)
tau.acf_wolves <- timeLag(df$wolves, technique = "acf", lag.max = 50)
tau.acf_grass <- timeLag(df$grass, technique = "acf", lag.max = 50)
print(tau.acf_sheep) # tau-autocor = 35
print(tau.acf_wolves)  # tau-autocor = 34
print(tau.acf_grass) # tau-autocor = 36
# Compute the Average Mutual Information
tau.ami_sheep <- timeLag(df$sheep, technique = "ami", lag.max = 50)
tau.ami_wolves <- timeLag(df$wolves, technique = "ami", lag.max = 50)
tau.ami_grass <- timeLag(df$grass, technique = "ami", lag.max = 50)
print(tau.ami_sheep) # tau-ami = 14
print(tau.ami_wolves)  # tau-ami = 14
print(tau.ami_grass) # tau-ami = 14
# Estimating embedding dimensions -----------------------------------------
#False Nearest Neighbors (Kennel, et al., 1992)
# Compute and plot False Nearest Neighbors with AMI
fnn.out_sheep <- false.nearest(df$sheep, m = 7, d = tau.ami_sheep, rt = 10, t = 50, eps = sd(df$sheep)/10)
fnn.out_wolves <- false.nearest(df$wolves, m = 7, d = tau.ami_wolves, rt = 10, t = 50, eps = sd(df$wolves)/10)
fnn.out_grass <- false.nearest(df$grass, m = 7, d = tau.ami_grass, rt = 10, t = 50, eps = sd(df$grass)/10)
plot(fnn.out_sheep) # FNN = 3
plot(fnn.out_wolves)  # FNN = 3
plot(fnn.out_grass) # FNN = 3
# Compute and plot Cao's method with AMI
emb.dim_sheep <- estimateEmbeddingDim(df$sheep, time.lag = tau.ami_sheep, max.embedding.dim = 15)
emb.dim_wolves <- estimateEmbeddingDim(df$wolves, time.lag = tau.ami_wolves, max.embedding.dim = 15)
emb.dim_grass <- estimateEmbeddingDim(df$grass, time.lag = tau.ami_grass, max.embedding.dim = 15)
print(emb.dim_sheep)  #emb.dim_sheep = 8
print(emb.dim_wolves)   #emb.dim_wolf = 8
print(emb.dim_grass)  #emb.dim_grass = 6
# Building phase space reconstruction -------------------------------------
#Build reconstructed manifold of M dimensions
sheep.takens <- buildTakens(df$sheep, emb.dim_sheep, tau.ami_sheep)
wolves.takens <- buildTakens(df$wolves, emb.dim_wolves, tau.ami_wolves)
grass.takens <- buildTakens(df$grass, emb.dim_grass, tau.ami_grass)
#How does the manifold look like?
head(sheep.takens, 10)
#Simple 3D plot of the original data
orig_plot <- plot_ly(x = df$sheep, y = df$wolves,  z = df$grass, type = "scatter3d", mode = "lines", opacity = 1, line = list(width = 2))
orig_plot <- orig_plot %>% layout(
title = "Original Signals in 3D",
scene = list(
xaxis = list(title = "Sheep"),
yaxis = list(title = "Wolf"),
zaxis = list(title = "Grass")
)
)
orig_plot
scatterplot3d(df$sheep, df$wolves, df$grass,
grid = T, highlight.3d = T, pch = 20, angle = 65,
main = "Sheep vs. Wolves vs. Grass in 3D",
xlab = "Sheep",
ylab = "Wolves",
zlab = 'Grass')
# Plots of reconstructed phase spaces -------------------------------------
#3D plots of Sheep vs. Wolf vs. Grass reconstructed
# Plotting Takens for all three variables.
sheep_phase <- plot_ly(x = sheep.takens[,1], y = sheep.takens[,4],  z = sheep.takens[,8], type = "scatter3d", mode = "lines", opacity = 1, line = list(width = 2))
sheep_phase <- sheep_phase %>% layout(
title = "Sheep in Phase Space",
scene = list(
xaxis = list(title = "Sheep[1]"),
yaxis = list(title = "Sheep[4]"),
zaxis = list(title = "Sheep[8]")
)
)
sheep_phase
wolves_phase <- plot_ly(x = wolves.takens[,1], y = wolves.takens[,4],  z = wolves.takens[,8], type = "scatter3d", mode = "lines", opacity = 1, line = list(width = 2))
wolves_phase <- wolves_phase %>% layout(
title = "Wolf in Phase Space",
scene = list(
xaxis = list(title = "Wolf[1]"),
yaxis = list(title = "Wolf[4]"),
zaxis = list(title = "Wolf[8]")
)
)
wolves_phase
grass_phase <- plot_ly(x = grass.takens[,1], y = grass.takens[,6],  z = grass.takens[,3], type = "scatter3d", mode = "lines", opacity = 1, line = list(width = 2))
grass_phase <- grass_phase %>% layout(
title = "Grass in Phase Space",
scene = list(
xaxis = list(title = "Grass[1]"),
yaxis = list(title = "Grass[6]"),
zaxis = list(title = "Grass[3]")
)
)
grass_phase
#Simpler 3D plots
#Sheep
scatterplot3d(sheep.takens[,1], sheep.takens[,4], sheep.takens[,8],
grid = T, highlight.3d = T, pch = 20, angle = 65,
main = "Sheep in 3D",
xlab = 'Sheep[1]',
ylab = 'Sheep[4]',
zlab = 'Sheep[8]')
#Wolves
scatterplot3d(wolves.takens[,1], wolves.takens[,4], wolves.takens[,8],
grid = T, highlight.3d = T, pch = 20, angle = 65,
main = "Wolves in 3D",
xlab = 'Wolves[1]',
ylab = 'Wolves[4]',
zlab = 'Wolves[8]')
#Grass
scatterplot3d(grass.takens[,1], grass.takens[,3], grass.takens[,6],
grid = T, highlight.3d = T, pch = 20, angle = 65,
main = "Grass in 3D",
xlab = 'Grass[1]',
ylab = 'Grass[3]',
zlab = 'Grass[6]')
library(NCmisc)
list.functions.in.file('phase_space_reconstruction.R', alphabetic = TRUE)
setwd("~/Documents/Code/complexsystems/modules/Phase Space Reconstruction")
library(NCmisc)
list.functions.in.file('phase_space_reconstruction.R', alphabetic = TRUE)
setwd("~/Documents/Code/complexsystems/modules/Introduction to Temporal Dynamics & Change")
set.seed(29)
# Loading packages --------------------------------------------------------
library(ggplot2)
library(nonlinearTseries)
library(zoo)
library(lattice)
library(tseries)
# Loading dataset ---------------------------------------------------------
# Import wolf_sheep_grasspredation.csv
df <- read.csv("wolf_sheep_grasspredation.csv", header = 1, skip = 23, col.names = c('', 'time', 'sheep', 'wolves', 'grass'))
df[,1] <- NULL
ggplot(data = df, aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = sheep, color = 'Sheep')) +
geom_line(aes(y = wolves, color = 'Wolves')) +
geom_line(aes(y = grass, color = 'Grass')) +
ggtitle('Sheep/Wolf/Grass Predator-prey Dataset') +
xlab('Time') +
ylab('Count')
# Types of change ---------------------------------------------------------
#First-order change
first_order_change <- data.frame('time' = seq(1, 100, 1),
'linear' = rep(5, 100),
'constant' = seq(0.1, 10, 0.1),
'exponential' = rep(NA, 100))
for (i in 1:100) {
first_order_change$exponential[i] <- (0.001 * 1.1 ** i)
}
ggplot(data = first_order_change, aes(x = time)) +
geom_line(aes(y = linear, color = 'Linear Value')) +
geom_line(aes(y = constant, color = 'Constant Change')) +
geom_line(aes(y = exponential, color = 'Exponential Change')) +
xlab('Time') +
ylab('Value') +
ggtitle('First-order change')
#Second-order change
second_order_change <- data.frame('time' = seq(1, 100, 1),
'constant' = rep(NA, 100),
'non-constant' = rep(NA, 100),
'oscillating' = rep(NA, 100))
for (i in 1:100) {
second_order_change$constant[i] = sin(i/5) + 6
}
for (i in 1:100) {
second_order_change$non_constant[i] = sin(i * (i/400)) + 3
}
temp <- c(seq(1, 50, 1), seq(50, 1, -1))
for (i in 1:100) {
second_order_change$oscillating[i] = cos(temp[i] * temp[i] / 200)
}
ggplot(data = second_order_change, aes(x = time)) +
geom_line(aes(y = constant, color = 'Constant Oscillation')) +
geom_line(aes(y = non_constant, color = 'Non-constant Oscillation')) +
geom_line(aes(y = oscillating, color = 'Oscillating Oscillation')) +
xlab('Time') +
ylab('Value') +
ggtitle('Second-order change')
#Third-order change
lorenz <- lorenz(sigma = 10, beta = 8/3, rho = 28, start = c(-13, -14, 47), time = seq(0, 50, by = 0.01))
ggplot(data = data.frame(lorenz), aes(x = time, y = x)) +
geom_line() +
xlab('Time') +
ylab('X value') +
ggtitle('Third-order change')
# Stationarity tests ------------------------------------------------------
#Stationarity tests
sheep_dickey <- adf.test(x = df$sheep, alternative = 'stationary')
wolves_dickey <- adf.test(x = df$wolves, alternative = 'stationary')
grass_dickey <- adf.test(x = df$grass, alternative = 'stationary')
sheep_kpss <- kpss.test(df$sheep, null = 'Trend')
wolves_kpss <- kpss.test(df$wolves, null = 'Trend')
grass_kpss <- kpss.test(df$grass, null = 'Trend')
# Stability and measurement error -----------------------------------------
#Random walk plot
x <- data.frame('x' = ts(cumsum(rnorm(100, mean = 1, sd = 2)), start = 1, end = 100, frequency = 1), 'Time' = c(1:100))
ggplot(data = x, aes(x = Time, y = x)) + geom_line() +
xlab('Time') +
ylab('Value') +
ggtitle('Example random walk plot')
#Stability and measurement error
densityplot(df$sheep, main = 'Sheep stability', xlab = 'Number of sheep', ylab = 'Density')
densityplot(df$wolves, main = 'Wolves stability', xlab = 'Number of wolves', ylab = 'Density')
densityplot(df$grass, main = 'Grass stability', xlab = 'Amount of grass', ylab = 'Density')
#Measurement error Sheep
set.seed(2929)
a <- rnorm(2501, mean = 0, sd = 1)
b <- rnorm(2501, mean = 0, sd = 10)
c <- rnorm(2501, mean = 0, sd = 30)
d <- rnorm(2501, mean = 0, sd = 50)
plot(density(df$sheep + a), main = 'Measurement Error Sheep', xlab = 'Number of Sheep', col = '#E69F00')
lines(density(df$sheep + b), col = '#56B4E9')
lines(density(df$sheep + c), col = '#CC79A7')
lines(density(df$sheep + d), col = '#009E73')
legend(450, 0.0055, legend = c('SD = 1', 'SD = 10', 'SD = 30', 'SD = 50'), fill = c('#E69F00', '#56B4E9', '#CC79A7', '#009E73'))
#Measurement error Wolves
set.seed(2929)
a <- rnorm(2501, mean = 0, sd = 1)
b <- rnorm(2501, mean = 0, sd = 10)
c <- rnorm(2501, mean = 0, sd = 30)
d <- rnorm(2501, mean = 0, sd = 50)
plot(density(df$wolves + a), main = 'Measurement Error Wolves', xlab = 'Number of Wolves', col = '#E69F00')
lines(density(df$wolves + b), col = '#56B4E9')
lines(density(df$wolves + c), col = '#CC79A7')
lines(density(df$wolves + d), col = '#009E73')
legend(230, 0.0095, legend = c('SD = 1', 'SD = 10', 'SD = 30', 'SD = 50'), fill = c('#E69F00', '#56B4E9', '#CC79A7', '#009E73'))
#Measurement error Grass
set.seed(2929)
a <- rnorm(2501, mean = 0, sd = 1)
b <- rnorm(2501, mean = 0, sd = 10)
c <- rnorm(2501, mean = 0, sd = 30)
d <- rnorm(2501, mean = 0, sd = 50)
plot(density(df$grass + a), main = 'Measurement Error Grass', xlab = 'Amount of Grass', col = '#E69F00')
lines(density(df$grass + b), col = '#56B4E9')
lines(density(df$grass + c), col = '#CC79A7')
lines(density(df$grass + d), col = '#009E73')
legend(500, 0.0042, legend = c('SD = 1', 'SD = 10', 'SD = 30', 'SD = 50'), fill = c('#E69F00', '#56B4E9', '#CC79A7', '#009E73'))
# Smoothing/sampling ------------------------------------------------------
#Create smoothed dataset
df$deltasheep_1[25:2501] <- rollmean(df$sheep, 25)
df$deltawolves_1[25:2501] <- rollmean(df$wolves, 25)
df$deltagrass_1[25:2501] <- rollmean(df$grass, 25)
ggplot(data = df[25:2501,], aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = deltasheep_1, color = 'Sheep')) +
geom_line(aes(y = deltawolves_1, color = 'Wolves')) +
geom_line(aes(y = deltagrass_1, color = 'Grass')) +
xlab('Time') +
ylab('Count') +
ggtitle('Rolling Mean Window = 25')
#Create overly smoothed dataset
df$deltasheep_2[200:2501] <- rollmean(df$sheep, 200)
df$deltawolves_2[200:2501] <- rollmean(df$wolves, 200)
df$deltagrass_2[200:2501] <- rollmean(df$grass, 200)
ggplot(data = df[200:2501,], aes(x = time)) +
scale_colour_hue() +
geom_line(aes(y = deltasheep_2, color = 'Sheep')) +
geom_line(aes(y = deltawolves_2, color = 'Wolves')) +
geom_line(aes(y = deltagrass_2, color = 'Grass')) +
xlab('Time') +
ylab('Count') +
ggtitle('Rolling Mean Window = 200')
library(NCmisc)
list.functions.in.file('phase_space_reconstruction.R', alphabetic = TRUE)
library(NCmisc)
list.functions.in.file('temporal_dynamics_change', alphabetic = TRUE)
library(NCmisc)
list.functions.in.file('temporal_dynamics_change.R', alphabetic = TRUE)
